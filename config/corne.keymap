/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

 
&mmv {    
        time-to-max-speed-ms = <500>;
        acceleration-exponent=<1>;
};
&mwh {    
        time-to-max-speed-ms = <2000>;
        acceleration-exponent=<0>;
}; 
/ {
        combos{
                compatible = "zmk,combos";
                combo_spc {
                        timeout-ms = <50>;
                        key-positions = <13 16>;
                        bindings = <&kp SPACE>;
                        layers = <7>;
                };
                combo_p {
                        timeout-ms = <50>;
                        key-positions = <1 2>;
                        bindings = <&kp P>;
                        layers = <7>;
                };
                combo_o {
                        timeout-ms = <50>;
                        key-positions = <2 3>;
                        bindings = <&kp O>;
                        layers = <7>;
                };
                combo_h {
                        timeout-ms = <50>;
                        key-positions = <2 4>;
                        bindings = <&kp H>;
                        layers = <7>;
                };
                combo_k {
                        timeout-ms = <50>;
                        key-positions = <3 4>;
                        bindings = <&kp K>;
                        layers = <7>;
                };
                combo_y {
                        timeout-ms = <50>;
                        key-positions = <1 4>;
                        bindings = <&kp Y>;
                        layers = <7>;
                };
                combo_u {
                        timeout-ms = <50>;
                        key-positions = <13 15>;
                        bindings = <&kp U>;
                        layers = <7>;
                };
                combo_l {
                        timeout-ms = <50>;
                        key-positions = <25 26>;
                        bindings = <&kp L>;
                        layers = <7>;
                };
                combo_meta {
                        timeout-ms = <50>;
                        key-positions = <15 16>;
                        bindings = <&to LGUI>;
                        layers = <7>;
                };
                combo_alt {
                        timeout-ms = <50>;
                        key-positions = <14 16>;
                        bindings = <&to LALT>;
                        layers = <7>;
                };
                combo_bksp {
                        timeout-ms = <50>;
                        key-positions = <15 28>;
                        bindings = <&kp BSPC>;
                        layers = <7>;
                };
                combo_del {
                        timeout-ms = <50>;
                        key-positions = <16 27>;
                        bindings = <&kp DEL>;
                        layers = <7>;
                };
                combo_n {
                        timeout-ms = <50>;
                        key-positions = <26 27>;
                        bindings = <&kp N>;
                        layers = <7>;
                };
                combo_i {
                        timeout-ms = <50>;
                        key-positions = <27 28>;
                        bindings = <&kp I>;
                        layers = <7>;
                };
                combo_j {
                        timeout-ms = <50>;
                        key-positions = <26 28>;
                        bindings = <&kp J>;
                        layers = <7>;
                };
                combo_m {
                        timeout-ms = <50>;
                        key-positions = <25 28>;
                        bindings = <&kp M>;
                        layers = <7>;
                };
        };
};
/ {
        behaviors {
                mtt: mod_tap_tap {
                        compatible = "zmk,behavior-hold-tap";
                        label = "MOD_TAP_TAP";
                        #binding-cells = <2>;
                        flavor = "tap-preferred"; //was hold-preferred
                        tapping-term-ms = <150>;
                        quick-tap-ms = <200>;
                        bindings = <&kp>, <&kp>;
                };
                ltt: layer_tap_tap {
                        compatible = "zmk,behavior-hold-tap";
                        label = "LAYER_TAP_TAP";
                        #binding-cells = <2>;
                        flavor = "hold-preferred"; 
                        tapping-term-ms = <400>;
                        quick-tap-ms = <200>;
                        bindings = <&mo>, <&kp>;
                };                
        };

    keymap {
      compatible = "zmk,keymap";
  layer0 {
          bindings = <
          &kp TAB          &kp Q &kp W &kp E &kp R &kp T      &kp Y &kp U &kp I &kp O &kp P &kp BACKSPACE 
          &kp LEFT_SHIFT   &kp A &kp S &kp D &kp F &kp G      &kp H &kp J &kp K &kp L &kp SEMICOLON &kp ESCAPE 
          &kp LEFT_CONTROL &kp Z &kp X &kp C &kp V &kp B      &kp N &kp M &kp COMMA &kp DOT &kp SLASH &kp SINGLE_QUOTE 
                            &kp LEFT_GUI &mo 2 &kp SPACE      &kp ENTER &mo 3 &kp LEFT_ALT
          >;
        };layer1 {
          bindings = <
          &kp TAB          &kp Q &kp W &kp F &kp P &kp B      &kp J &kp L &kp U     &kp Y   &kp SEMICOLON &kp BACKSPACE 
          &kp LEFT_SHIFT   &kp A &kp R &kp S &kp T &kp G      &kp M &kp N &kp E     &kp I   &kp O         &kp ESCAPE 
          &kp LEFT_CONTROL &kp Z &kp X &kp C &kp D &kp V      &kp K &kp H &kp COMMA &kp DOT &kp SLASH     &kp SINGLE_QUOTE 
                            &kp LEFT_GUI &mo 2 &kp SPACE      &kp ENTER &mo 3 &kp LEFT_ALT
          >;
        };layer2 {
          bindings = <
          &trans &kp COMMA &kp N7 &kp N8 &kp N9 &none         &kp HOME &kp PAGE_DOWN &kp PAGE_UP &kp END   &none &kp DELETE  
          &trans &kp DOT   &kp N4 &kp N5 &kp N6 &none         &kp LEFT &kp DOWN      &kp UP      &kp RIGHT &none &sl 5  
          &trans &kp N0    &kp N1 &kp N2 &kp N3 &none         &none &none &none &none &none &to 0 
                                 &trans &trans &trans         &trans &mo 4 &trans
          >;
        };layer3 {
          bindings = <
          &trans &kp EXCL  &kp LPAR &kp RPAR &kp LBKT  &kp RBKT        &kp PLUS         &kp MINUS &kp ASTRK &kp SLASH     &kp EQUAL &kp BACKSPACE
          &trans &kp QMARK &kp LBRC &kp RBRC &kp LT    &kp GT          &kp GRAVE        &kp UNDER &kp CARET &kp BACKSLASH &kp NUHS  &sl 5
          &trans &none     &kp DLLR &kp AMPS &kp PRCNT &none           &kp SINGLE_QUOTE &kp TILDE &kp AT    &kp PIPE      &none     &to 0 
                                          &trans &mo 4 &trans          &trans &trans &trans
          >;
        };layer4 {
          bindings = <
          &none &kp PRINTSCREEN &kp F6 &kp F7 &kp F8 &kp F10       &none          &kp C_VOLUME_DOWN &kp C_VOLUME_UP  &kp C_MUTE         &none &kp C_EJECT
          &none &kp INSERT      &kp F4 &kp F5 &kp F9 &kp F11       &kp C_PREVIOUS &kp C_STOP        &kp C_PLAY_PAUSE &kp C_NEXT         &none &sl 5
          &none &none           &kp F1 &kp F2 &kp F3 &kp F12       &kp C_REWIND   &none             &none            &kp C_FAST_FORWARD &none &to 0
                                          &none &none &none        &none &none &none
          >;
        };layer5 {
          bindings = <
          &kp N6 &kp N6 &kp N6 &kp N6 &kp N6 &kp N6             &kp N6     &kp N6       &kp N6       &kp N6       &kp N6       &kp N6 
          &none  &none  &to 4  &to 5  &none  &none              &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4
          &none  &to 0  &to 1  &to 2  &to 3  &none              &none      &none        &none        &none        &none        &to 0 
                                 &none &none &none              &none &none &none
          >;
        };
    };
  };

